import {defineStore,storeToRefs} from "pinia";
import dbStorage from "./dbStorage";
import {sUrl} from "../consts";
import {get, post} from "../js/axios/request";
import {serverCache, localCache} from '../js/axios/serverCache'
import TUIKit from "../TUIKit";

const getUserSigUrl = sUrl('/app/chat/getUserSig')
import {appStore} from "../store";
import * as sns from "../js/common/sns";
import _ from "lodash-es";
import { communityStore } from '../page/chat/store/communityStore'

// @ts-ignore
export const chatStore = defineStore('chatStore',{
  state:()=> ({
    userSig: '',
    limitTotal: '200',
    users:[
      {uid: '4', reason: '阿皮大号' },
      {uid: '36', reason: '想天小客服'},
      {uid: '10', reason: '测试同学'},
      {uid: '23', reason: '产品同学'}
    ],
    group:[
      {groupID: 'suggest'}, {groupID:'noob'},
      {groupID:'bug'},{groupID:'fans'},
      {groupID: 'update'}, {groupID: 'develop_group'},
      {groupID: 'trade'}, {groupID: 'developer'},
      {groupID: '3dprint'}, {groupID: 'screen_diy'},
      {groupID: 'player'}, {groupID: '3cdigital'},
    ],
    //是否在加载中
    isLoading: false,
    //推荐数据
    recommendData: {
      users: [],
      groups: []
    },
    // 存储上一次会话记录
    conversations: {
      conversationID: (window as any).$TUIKit.TUIServer?.TUIConversation.currentStore?.currentConversationID,
    },
    //  开关设置
    settings:{
      showDouble: false,  // 是否展示社群双列
      enableHide:false, // 隐藏边栏
    },
    //通讯录数据存储
    contactsSet:{
      noticeNum:0,
      unReadMsgNum:null, // 群聊消息未读数
    }
  }),

  actions:{
    async getUserSig() {
      const getRs = await get(getUserSigUrl)
      if (getRs.status) {
        this.userSig = getRs.data
      }
    },
    async updateUserInfo() {
      let userInfo = appStore().userInfo;
      await (window as any).$TUIKit.tim.updateMyProfile({
        nick: userInfo.nickname,
        avatar: userInfo.avatar,
        selfSignature: String(userInfo.signature),
      })
    },
    async login() {
      const app:any = appStore();
      const com:any = communityStore();
      com.getMyCommunity();
      com.getCommunityTree();
      const {userInfo} = storeToRefs(app);
      const info:any = userInfo.value;
      await this.getUserSig()
      await (window as any).$TUIKit.login({
        userID: String(info.uid),
        userSig: this.userSig, // The password with which the user logs in to IM. It is the ciphertext generated by encrypting information such as userID.For the detailed generation method, see Generating UserSig
      });
      await this.updateUserInfo();
    },
    // 遍历获取推荐用户数据
    async loadRecommendUsers(){
      const findStore = appStore()
      let users = []
      // 遍历获取推荐用户
      for (let i = 0; i < this.users.length; i++){
        const uid = this.users[i].uid
        const userRes = await findStore.getUserCard(uid)
        const referItem = {
          uid: userRes.data.user.uid,
          nickname: userRes.data.user.nickname,
          avatar: userRes.data.user.avatar,
          reason: this.users[i].reason
        }
        users.push(referItem)
      }
      //用户后处理，处理他的好友关系
      for (const user of users) {
        user.reason = await user.reason //添加上原因
        //todo 检测好友关系
      }
      this.recommendData.users = users //常规写法
      return users
    },
    // 遍历获取推荐群聊数据
    async loadRecommendGroups(){
      let groups = []
      // 遍历获取推荐群聊
      for (let i = 0; i < this.group.length; i++){
        try {
          const option = this.group[i].groupID
          const result = await (window as any).$chat.searchGroupByID(option)
          const group = {...result.data.group, relationShip: ''}
          groups.push(group)
        } catch (error) {
          console.warn(this.group[i].groupID, error)
        }
      }
      this.recommendData.groups = groups
      return groups
    },
    // 判断推荐用户好友关系
    async updateUsersRelationship() {
      let users = this.recommendData.users
      let uids = this.users.map(u => {
        return u.uid
      })
      //todo 当只有一个用户的时候，这个返回的是一个字符串，而不是数组
      let relations = await sns.checkFriendship(uids)
      //用户后处理，处理他的好友关系
      for (const user of users) {
        user.reason = await user.reason //添加上原因
        //todo 检测好友关系
      }
      if (users.length === 1){
        users[0].relationship = relations
      }else{
        for (let i = 0; i < uids.length; i++) {
          users[i].relationship = relations[i]
        }
      }
    },
    // 判断推荐群关系
    async updateGroupRelationship() {
      let groups = this.recommendData.groups
      let groupIDs = groups.map(async(u) => {
        return u.groupID
      })
      const groupShip = await sns.checkGroupShip(groupIDs)
      if (groups.length === 1) {
        groups[0].relationShip = groupShip[0]
      } else {
        for (let i = 0; i < groupIDs.length; i++) {
          groups[i].relationShip = groupShip[i]
        }
      }
    },
    // 同时获取推荐数据
    async loadRecommendData(){
      Promise.all([this.loadRecommendUsers(),this.loadRecommendGroups()]).then((result:any)=>{
        this.updateUsersRelationship()
        this.updateGroupRelationship()
        this.isLoading = false
        // 判断是否为空数据,如果不是就进行缓存
        if(this.recommendData.groups.length !== 0 &&  this.recommendData.users !== 0 && !result.includes(undefined)){
          localCache.set('findData', this.recommendData, 10 * 60)
          serverCache.setData('findData', this.recommendData, 10 * 60)
        }
      })
    },
    async getReferData(){
      try {
        if (this.recommendData.users.length) {
          this.recommendData.users.forEach(user => {
            delete user.relationship
          })
        }
        if (this.recommendData.groups.length) {
          this.recommendData.groups.forEach(group => {
            delete group.relationship
          })
        }
        const result = await serverCache.getDataWithLocalCache('findData', {
          localCache: true, ttl: 10 * 60,
          cache: false
        })
        if(result && result !== undefined){
          this.recommendData = result
          this.updateUsersRelationship()
          this.updateGroupRelationship()
          this.isLoading = false
        }else{
          console.warn('获取数据失败,返回undefined', result);
          this.isLoading = this.recommendData.users.length === 0
          this.loadRecommendData()
        }
      } catch (error) {
        console.error('获取数据失败', error)
      }
    },
    setDouble() { this.settings.showDouble=!this.settings.showDouble },
    setFloatVisible(value:any){
      localCache.set('float',value,30*60)
      this.settings.enableHide = localCache.get('float')
    },
    updateNum(option:any){  this.contactsSet = option },
    updateConversation(val:any){ this.conversations.conversationID = val },

    /**
     *  接收社群消息未读数据
     * @param args  //接收消息参数
     * @param no    // 社群id
     * **/
    receiveUnreadMsgData(args:any,no:any){
      // 获取会话列表进行匹配
      const store = (window as any).$TUIKit.store.store;
      const conversation = store.TUIConversation;
      const list = conversation.conversationList;
      // 获取社群频道列表进行匹配
      const community = communityStore();
      community.getCategoryData(no);
      const { categoryList } = storeToRefs(community);
      // 获取树状结构的数据进行数组转换
      const treeList = categoryList.value.tree;
      const childrenList = {
        list:[],
        noList:[]
      };
      for(const item of treeList){
        if(item.hasOwnProperty('children')){
          childrenList.list = item.children;
        }else{
          const index = childrenList.noList.findIndex((find:any)=>{
            return find.id === item.id;
          })
          if(index === -1){
            childrenList.noList.push(item as never);
          }
        }
      }
      // 将两组数组进行合并
      const newList = childrenList.list.concat(childrenList.noList);
      // 将数组中的props进行转换
      const mapNewList = newList.map((item:any)=>{
        const jsonItem = JSON.parse(item.props);
        return jsonItem.groupID;
      });    
      
      // 判断会话列表数组不为空,以及容错,获取unreadCount字段
      if(list !== undefined && list.length !== 0){
        const subList = [] 
        for(const item of list){
          const itemFile = item.groupProfile;
          const index = subList.findIndex((find:any)=>{  return find.groupID === itemFile.groupID })
          if(index === -1){
            const obj = {
              groupID:itemFile.groupID,
              unreadCount:item.unreadCount,
              name:itemFile.name
            }
            subList.push(obj as never);
          }
        }
        let total = 0;
        for(const item of mapNewList){
          const findItem = subList.find((find:any)=>{
            return find.groupID === item
          })
          if(findItem !== undefined){
            total += findItem.unreadCount;
          }
        }
        console.log('执行...查看',total);
        const obj = {
          no:no,
          list:subList,
          unreadTotal:total,
        }
        this.contactsSet.unReadMsgNum = obj
      }
    }

  },

  persist:{
    enabled: true,
    strategies: [{
      // 自定义存储的 key，默认是 store.$id
      // 可以指定任何 extends Storage 的实例，默认是 sessionStorage
      storage: localStorage,
      paths: ['settings', 'recommendData', 'conversations']
      // state 中的字段名，按组打包储存
    }]
  }
})
